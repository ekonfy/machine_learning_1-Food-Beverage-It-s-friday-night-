sales_ts <- ts(data = sales$DAUTONSA,
start = c(2011,1),
frequency = 12)
sales_dc <- decompose(sales_ts)
plot(sales_dc)
# 1.5 tahun untuk test
sales_test <- tail(sales_ts, 18)
# 7 tahun untuk train, sisanya
sales_train <- head(sales_ts, -18)
adf.test(sales_train)
sales_train_diff <- sales_train %>% diff()
adf.test(sales_train_diff)
sales_auto <- auto.arima(sales_train, seasonal = T)
sales_auto
sales_train %>%
autoplot(series = "Actual") +
autolayer(sales_auto$fitted, series = "ARIMA(0,1,1)(0,1,0)[12]")
plot_cf(sales_train_diff)
sales_sarima1 <- Arima(sales_train, order = c(8,1,11), seasonal = c(2,1,3))
sales_sarima1
model_list <- list(
"ARIMA(0,1,1)(0,1,0)[12]" = sales_auto,
"ARIMA kita" = sales_sarima1)
compare_fitting(model_list)
sales_auto_f <- forecast(sales_auto, h = 18)
sales_sarima1_f <- forecast(sales_sarima1, h = 18)
forecast_list <- list(
"ARIMA(0,1,1)(0,1,0)[12]" = sales_auto_f,
"ARIMA kita" = sales_sarima1_f)
compare_forecast(forecast_list, sales_test)
sales_ts %>%
autoplot(series = "Actual") +
autolayer(sales_auto_f$mean, series = "ARIMA(0,1,1)(0,1,0)[12]") +
autolayer(sales_sarima1_f$mean, series = "ARIMAkita")
test_forecast(actual = sales_ts,
forecast.obj = sales_auto_f,
train = sales_train,
test = sales_test)
model_produksi1 <- auto.arima(sales_ts)
sales_pro_f <- forecast(model_produksi1, h = 12)
sales_pro_f
acf(sales_auto$residuals)
Box.test(sales_auto$residuals, type = "Ljung-Box")
hist(sales_sarima1$residuals, breaks = 15)
shapiro.test(sales_sarima1$residuals)
sales_stlm <- stlm(y = sales_train,
s.window = 12,
method = "arima")
summary(sales_stlm$model)
sales_stlm$stl %>%
autoplot()
sales_stlm_forecast <- forecast(sales_stlm, h = 18)
forecast::accuracy(sales_stlm_forecast$mean, sales_test)
sales_ts %>%
autoplot(series = "Actual") +
autolayer(sales_stlm_forecast$fitted, series = "Train") +
autolayer(sales_stlm_forecast$mean, series = "Test")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(padr)
library(zoo)
library(fpp)
library(TSstudio)
library(forecast)
library(TTR)
library(tseries)
library(MLmetrics)
library(readxl)
fnb <- read.csv("data/data-train.csv")
fnb
glimpse(fnb)
summary(fnb)
range(fnb)
range(fnb$transaction_date)
fnb$transaction_date
fnb$transaction_date
fnb$transaction_date <- ymd_hms(fnb$transaction_date)
fnb <- fnb %>%
mutate(datetime= floor_date(transaction_date, unit ="hour"))
fnb <- fnb %>%
group_by(datetime) %>%
summarise(count_visitor = n_distinct(receipt_number))
View(fnb)
min_date <- min(fnb$datetime)
max_date <- max(fnb$datetime)
fnb <- fnb %>%
pad(start_val = make_datetime(year = year(min_date),
month = month(min_date),
day= day(min_date),
hour = 0),
end_val = make_datetime(year = year(max_date),
month = month(max_date),
day= day(max_date),
hour = 23))
fnb
max_date
min_date
min_date <- min(fnb$datetime)
View(fnb)
fnb_fin <- fnb %>%
mutate(count_visitor = replace_na(count_visitor,0)) %>%
filter(hour(datetime) >=10& hour(datetime) <=22)
fnb_fin <- fnb_fin[-c(1:3),]
fnb_fin
View(fnb_fin)
fnb_ts <- ts(data=fnb_fin$count_visitor,start = c(1,4), frequency = 13)
fnb_ts %>%
autoplot()+
theme_minimal()
fnb_ts %>%
tail(13*7*4) %>%
stl(s.window = "periodic") %>%
autoplot()
fnb_single_decompose <- decompose(fnb_ts)
fnb_msts <- msts(data = fnb_fin$count_visitor,seasonal.periods = c(13,13*7))
fnb_msts %>%
tail(13*7*4) %>%
stl(s.window = "periodic") %>%
autoplot()
fnb_double_decompose <- mstl(fnb_msts)
fnb_fin %>%
mutate(
seasonal = fnb_single_decompose$seasonal,
hour = hour(datetime)
) %>%
distinct(hour, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col() +
theme_minimal() +
scale_x_continuous(breaks = seq(10,22,1)) +
labs(
title = "Single Seasonality Plot"
)
as.data.frame(fnb_double_decompose) %>%
mutate(datetime = fnb_fin$datetime) %>%
mutate(
dow = wday(datetime, label = TRUE, abbr = FALSE),
hour = as.factor(hour(datetime))
) %>%
group_by(dow, hour) %>%
summarise(seasonal = sum(Seasonal13 + Seasonal91)) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = dow)) +
scale_fill_viridis_d(option = "plasma") +
theme_minimal() +
labs(
title = "Multiple Seasonality Plot"
)
ts_info(fnb_ts)
train_fnb_ts <- head(fnb_ts, n = length(fnb_ts)-13*7)
test_fnb_ts <- tail(fnb_ts, n = 13*7)
# modeling
model_tes_ts <- HoltWinters(train_fnb_ts)
# forecast
forecast_tes_ts <- forecast(model_tes_ts, h = 13*7)
# model evaluation
MAE(y_pred = forecast_tes_ts$mean, y_true = test_fnb_ts)
test_forecast(actual = fnb_ts ,
forecast.obj = forecast_tes_ts,
train = train_fnb_ts,
test = test_fnb_ts)
model_arima_ts <- stlm(train_fnb_ts, method = "arima")
# forecast
forecast_arima_ts <- forecast(model_arima_ts, h=13*7)
# model evaluation
MAE(y_pred = forecast_arima_ts$mean, y_true = test_fnb_ts)
test_forecast(actual = fnb_ts ,
forecast.obj = forecast_arima_ts,
train = train_fnb_ts,
test = test_fnb_ts)
train_fnb_msts <- head(fnb_msts, n= length(fnb_msts)-(13*7))
test_fnb_msts <- tail(fnb_msts, n=13*7)
model_tes_msts <- HoltWinters(train_fnb_msts)
train_fnb_msts <- head(fnb_msts, n= length(fnb_msts)-(13*7))
test_fnb_msts <- tail(fnb_msts, n=13*7)
model_tes_msts <- HoltWinters(train_fnb_msts)
# forecast
forecast_tes_msts <- forecast(model_tes_msts, h = 13*7)
# model evaluation
MAE(y_pred = forecast_tes_msts$mean, y_true = test_fnb_msts)
test_forecast(actual = fnb_msts ,
forecast.obj = forecast_tes_msts,
train = train_fnb_msts,
test = test_fnb_msts)
model_arima_msts <- stlm(train_fnb_msts, method = "arima")
# forecast
forecast_arima_msts <- forecast(model_arima_msts, h=13*7)
# model evaluation
MAE(y_pred = forecast_arima_msts$mean, y_true = test_fnb_msts)
test_forecast(actual = fnb_msts ,
forecast.obj = forecast_arima_msts,
train = train_fnb_msts,
test = test_fnb_msts)
test_data <- read.csv("data/data-test.csv")
model_arima_test <- stlm(fnb_msts, method = "arima")
# forecast
forecast_arima_test <- forecast(model_arima_test, h=13*7)
# insert the data into table
test_data$visitor <- forecast_arima_test$mean
write.csv(test_data,file = "submission-david.csv", row.names = F)
head(test_data,3)
anyNA(fnb)
knitr::opts_chunk$set(echo = TRUE)
Box.test(model_arima_test$residuals, type = "Ljung-Box")
shapiro.test(x = model_arima_test$residuals)
knitr::include_graphics("Check Performace.png")
knitr::include_graphics("Check Performace.png")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(padr)
library(zoo)
library(fpp)
library(TSstudio)
library(forecast)
library(TTR)
library(tseries)
library(MLmetrics)
library(readxl)
fnb <- read.csv("data/data-train.csv")
fnb
glimpse(fnb)
summary(fnb)
anyNA(fnb)
fnb$transaction_date <- ymd_hms(fnb$transaction_date)
fnb <- fnb %>%
mutate(datetime= floor_date(transaction_date, unit ="hour"))
fnb <- fnb %>%
group_by(datetime) %>%
summarise(count_visitor = n_distinct(receipt_number))
min_date <- min(fnb$datetime)
max_date <- max(fnb$datetime)
fnb <- fnb %>%
pad(start_val = make_datetime(year = year(min_date),
month = month(min_date),
day= day(min_date),
hour = 0),
end_val = make_datetime(year = year(max_date),
month = month(max_date),
day= day(max_date),
hour = 23))
fnb_fin <- fnb %>%
mutate(count_visitor = replace_na(count_visitor,0)) %>%
filter(hour(datetime) >=10& hour(datetime) <=22)
fnb_fin <- fnb_fin[-c(1:3),]
fnb_ts <- ts(data=fnb_fin$count_visitor,start = c(1,4), frequency = 13)
fnb_ts %>%
autoplot()+
theme_minimal()
fnb_ts %>%
tail(13*7*4) %>%
stl(s.window = "periodic") %>%
autoplot()
fnb_single_decompose <- decompose(fnb_ts)
fnb_msts <- msts(data = fnb_fin$count_visitor,seasonal.periods = c(13,13*7))
fnb_msts %>%
tail(13*7*4) %>%
stl(s.window = "periodic") %>%
autoplot()
fnb_double_decompose <- mstl(fnb_msts)
fnb_fin %>%
mutate(
seasonal = fnb_single_decompose$seasonal,
hour = hour(datetime)
) %>%
distinct(hour, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col() +
theme_minimal() +
scale_x_continuous(breaks = seq(10,22,1)) +
labs(
title = "Single Seasonality Plot"
)
as.data.frame(fnb_double_decompose) %>%
mutate(datetime = fnb_fin$datetime) %>%
mutate(
dow = wday(datetime, label = TRUE, abbr = FALSE),
hour = as.factor(hour(datetime))
) %>%
group_by(dow, hour) %>%
summarise(seasonal = sum(Seasonal13 + Seasonal91)) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = dow)) +
scale_fill_viridis_d(option = "plasma") +
theme_minimal() +
labs(
title = "Multiple Seasonality Plot"
)
ts_info(fnb_ts)
train_fnb_ts <- head(fnb_ts, n = length(fnb_ts)-13*7)
test_fnb_ts <- tail(fnb_ts, n = 13*7)
# modeling
model_tes_ts <- HoltWinters(train_fnb_ts)
# forecast
forecast_tes_ts <- forecast(model_tes_ts, h = 13*7)
# model evaluation
MAE(y_pred = forecast_tes_ts$mean, y_true = test_fnb_ts)
test_forecast(actual = fnb_ts ,
forecast.obj = forecast_tes_ts,
train = train_fnb_ts,
test = test_fnb_ts)
model_arima_ts <- stlm(train_fnb_ts, method = "arima")
# forecast
forecast_arima_ts <- forecast(model_arima_ts, h=13*7)
# model evaluation
MAE(y_pred = forecast_arima_ts$mean, y_true = test_fnb_ts)
test_forecast(actual = fnb_ts ,
forecast.obj = forecast_arima_ts,
train = train_fnb_ts,
test = test_fnb_ts)
train_fnb_msts <- head(fnb_msts, n= length(fnb_msts)-(13*7))
test_fnb_msts <- tail(fnb_msts, n=13*7)
model_tes_msts <- HoltWinters(train_fnb_msts)
# forecast
forecast_tes_msts <- forecast(model_tes_msts, h = 13*7)
# model evaluation
MAE(y_pred = forecast_tes_msts$mean, y_true = test_fnb_msts)
test_forecast(actual = fnb_msts ,
forecast.obj = forecast_tes_msts,
train = train_fnb_msts,
test = test_fnb_msts)
model_arima_msts <- stlm(train_fnb_msts, method = "arima")
# forecast
forecast_arima_msts <- forecast(model_arima_msts, h=13*7)
# model evaluation
MAE(y_pred = forecast_arima_msts$mean, y_true = test_fnb_msts)
test_forecast(actual = fnb_msts ,
forecast.obj = forecast_arima_msts,
train = train_fnb_msts,
test = test_fnb_msts)
test_data <- read.csv("data/data-test.csv")
model_arima_test <- stlm(fnb_msts, method = "arima")
# forecast
forecast_arima_test <- forecast(model_arima_test, h=13*7)
# insert the data into table
test_data$visitor <- forecast_arima_test$mean
write.csv(test_data,file = "submission-david.csv", row.names = F)
head(test_data,3)
knitr::include_graphics("Check Performace.png")
Box.test(model_arima_test$residuals, type = "Ljung-Box")
shapiro.test(x = model_arima_test$residuals)
head(fnb)
tail(fnb)
fnb <- read.csv("data/data-train.csv")
head(fnb)
glimpse(fnb)
summary(fnb)
anyNA(fnb)
summary(fnb)
fnb$transaction_date <- ymd_hms(fnb$transaction_date)
fnb <- fnb %>%
mutate(datetime= floor_date(transaction_date, unit ="hour"))
fnb <- fnb %>%
group_by(datetime) %>%
summarise(count_visitor = n_distinct(receipt_number))
min_date <- min(fnb$datetime)
max_date <- max(fnb$datetime)
fnb <- fnb %>%
pad(start_val = make_datetime(year = year(min_date),
month = month(min_date),
day= day(min_date),
hour = 0),
end_val = make_datetime(year = year(max_date),
month = month(max_date),
day= day(max_date),
hour = 23))
fnb_fin <- fnb %>%
mutate(count_visitor = replace_na(count_visitor,0)) %>%
filter(hour(datetime) >=10& hour(datetime) <=22)
fnb_fin <- fnb_fin[-c(1:3),]
fnb <- fnb %>%
pad(start_val = make_datetime(year = year(min_date),
month = month(min_date),
day= day(min_date),
hour = 0),
end_val = make_datetime(year = year(max_date),
month = month(max_date),
day= day(max_date),
hour = 23))
fnb_fin <- fnb %>%
mutate(count_visitor = replace_na(count_visitor,0)) %>%
filter(hour(datetime) >=10& hour(datetime) <=22)
fnb_fin <- fnb_fin[-c(1:3),]
fnb_ts <- ts(data=fnb_fin$count_visitor,start = c(1,4), frequency = 13)
fnb_ts %>%
autoplot()+
theme_minimal()
fnb_ts %>%
tail(13*7*4) %>%
stl(s.window = "periodic") %>%
autoplot()
fnb_single_decompose <- decompose(fnb_ts)
fnb_msts <- msts(data = fnb_fin$count_visitor,seasonal.periods = c(13,13*7))
fnb_msts %>%
tail(13*7*4) %>%
stl(s.window = "periodic") %>%
autoplot()
fnb_double_decompose <- mstl(fnb_msts)
fnb_fin %>%
mutate(
seasonal = fnb_single_decompose$seasonal,
hour = hour(datetime)
) %>%
distinct(hour, seasonal) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col() +
theme_minimal() +
scale_x_continuous(breaks = seq(10,22,1)) +
labs(
title = "Single Seasonality Plot"
)
as.data.frame(fnb_double_decompose) %>%
mutate(datetime = fnb_fin$datetime) %>%
mutate(
dow = wday(datetime, label = TRUE, abbr = FALSE),
hour = as.factor(hour(datetime))
) %>%
group_by(dow, hour) %>%
summarise(seasonal = sum(Seasonal13 + Seasonal91)) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = dow)) +
scale_fill_viridis_d(option = "plasma") +
theme_minimal() +
labs(
title = "Multiple Seasonality Plot"
)
as.data.frame(fnb_double_decompose) %>%
mutate(datetime = fnb_fin$datetime) %>%
mutate(
dow = wday(datetime, label = TRUE, abbr = FALSE),
hour = as.factor(hour(datetime))
) %>%
group_by(dow, hour) %>%
summarise(seasonal = sum(Seasonal13 + Seasonal91)) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = dow)) +
scale_fill_viridis_d(option = "plasma") +
theme_minimal() +
labs(
title = "multiseasonality Plot"
)
as.data.frame(fnb_double_decompose) %>%
mutate(datetime = fnb_fin$datetime) %>%
mutate(
dow = wday(datetime, label = TRUE, abbr = FALSE),
hour = as.factor(hour(datetime))
) %>%
group_by(dow, hour) %>%
summarise(seasonal = sum(Seasonal13 + Seasonal91)) %>%
ggplot(mapping = aes(x = hour, y = seasonal)) +
geom_col(aes(fill = dow)) +
scale_fill_viridis_d(option = "plasma") +
theme_minimal() +
labs(
title = "Multiseasonality Plot"
)
ts_info(fnb_ts)
train_fnb_ts <- head(fnb_ts, n = length(fnb_ts)-13*7)
test_fnb_ts <- tail(fnb_ts, n = 13*7)
# modeling
model_tes_ts <- HoltWinters(train_fnb_ts)
# forecast
forecast_tes_ts <- forecast(model_tes_ts, h = 13*7)
# model evaluation
MAE(y_pred = forecast_tes_ts$mean, y_true = test_fnb_ts)
test_forecast(actual = fnb_ts ,
forecast.obj = forecast_tes_ts,
train = train_fnb_ts,
test = test_fnb_ts)
model_arima_ts <- stlm(train_fnb_ts, method = "arima")
# forecast
forecast_arima_ts <- forecast(model_arima_ts, h=13*7)
# model evaluation
MAE(y_pred = forecast_arima_ts$mean, y_true = test_fnb_ts)
test_forecast(actual = fnb_ts ,
forecast.obj = forecast_arima_ts,
train = train_fnb_ts,
test = test_fnb_ts)
train_fnb_msts <- head(fnb_msts, n= length(fnb_msts)-(13*7))
test_fnb_msts <- tail(fnb_msts, n=13*7)
model_tes_msts <- HoltWinters(train_fnb_msts)
# forecast
forecast_tes_msts <- forecast(model_tes_msts, h = 13*7)
# model evaluation
MAE(y_pred = forecast_tes_msts$mean, y_true = test_fnb_msts)
test_forecast(actual = fnb_msts ,
forecast.obj = forecast_tes_msts,
train = train_fnb_msts,
test = test_fnb_msts)
model_arima_msts <- stlm(train_fnb_msts, method = "arima")
# forecast
forecast_arima_msts <- forecast(model_arima_msts, h=13*7)
# model evaluation
MAE(y_pred = forecast_arima_msts$mean, y_true = test_fnb_msts)
test_forecast(actual = fnb_msts ,
forecast.obj = forecast_arima_msts,
train = train_fnb_msts,
test = test_fnb_msts)
test_data <- read.csv("data/data-test.csv")
model_arima_test <- stlm(fnb_msts, method = "arima")
# forecast
forecast_arima_test <- forecast(model_arima_test, h=13*7)
# insert the data into table
test_data$visitor <- forecast_arima_test$mean
write.csv(test_data,file = "submission-david.csv", row.names = F)
head(test_data,3)
knitr::include_graphics("Check Performace.png")
head(test_data,3)
Box.test(model_arima_test$residuals, type = "Ljung-Box")
Box.test(model_arima_test$residuals, type = "Ljung-Box")
shapiro.test(x = model_arima_test$residuals)
